{"version":3,"sources":["ui/components/stateless/bottom_app_bar/BottomAppBar.tsx","ui/components/stateless/header_app_bar/HeaderAppBar.tsx","ui/components/stateful/data_editor/DataEditor.tsx","ui/screens/app/App.tsx","core/hooks.ts","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","top","bottom","grow","flexGrow","button","margin","spacing","input","display","BottomAppBar","onGenerateChartButtonPress","classes","AppBar","position","color","className","Toolbar","Button","variant","onClick","root","icon","marginLeft","marginRight","title","HeaderAppBar","Typography","align","DataEditor","height","handleEditorChange","onChange","language","createMuiTheme","palette","primary","main","grey","secondary","blue","App","useState","text","setText","wasm","setWASM","dataSets","setDataSets","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","initialEditorHeight","setInitialEditorHeight","editorHeight","setEditorHeight","useCallback","a","events","Events","from_text","events_data","get_events_data_by_idx","dataset_vec","dataSet_vec","map","dataset","label","selection","group","data","points","point","timestamp","value","useEffect","series","React","useMemo","showPoints","axes","type","ThemeProvider","style","width","Infinity","axis","minConstraints","maxConstraints","onResize","event","element","handle","resizeHandles","resizeHandle","ev","alignItems","flex","tooltip","Boolean","location","hostname","match","monaco","init","then","languages","typescript","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","catch","error","console","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3248d3f8.chunk.js","sourcesContent":["import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n}));\n\nexport interface BottomAppBarProps {\n  onGenerateChartButtonPress?: React.MouseEventHandler;\n}\n\nexport default function BottomAppBar({ onGenerateChartButtonPress, }: BottomAppBarProps) {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <Button variant=\"contained\" color=\"secondary\" className={classes.button} onClick={onGenerateChartButtonPress}>\n            Generate Chart\n          </Button>\n        </Toolbar>\n      </AppBar>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MultilineChart from '@material-ui/icons/MultilineChartRounded'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  icon: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\ninterface HeaderAppBarProps {\n  title: String;\n}\n\nexport default function HeaderAppBar({ title }: HeaderAppBarProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <MultilineChart className={classes.icon}/>\n          <Typography align='left' variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from 'react';\nimport {ControlledEditor, ControlledEditorOnChange } from \"@monaco-editor/react\";\nimport './DataEditor.css';\n\ninterface DataEditorProps {\n  height?: string | number | undefined,\n  handleEditorChange?: ControlledEditorOnChange | undefined\n}\n\nconst DataEditor = ({ height = \"50vh\", handleEditorChange }: DataEditorProps) => {\n  return (\n    <ControlledEditor\n      theme=\"dark\"\n      height={height}\n      onChange={handleEditorChange}\n      language=\"typescript\"\n    />\n  );\n}\n\nexport default DataEditor","import React, {useCallback, useEffect, useState} from 'react';\nimport {ThemeProvider} from '@material-ui/styles';\nimport {createMuiTheme} from '@material-ui/core';\nimport {grey, blue} from '@material-ui/core/colors';\nimport DragHandleRounded from '@material-ui/icons/DragHandleRounded'\nimport './App.css';\nimport BottomAppBar from '../../components/stateless/bottom_app_bar/BottomAppBar';\nimport HeaderAppBar from '../../components/stateless/header_app_bar/HeaderAppBar';\nimport DataEditor from '../../components/stateful/data_editor/DataEditor';\n// @ts-ignore\nimport {Chart} from 'react-charts'\n// @ts-ignore\nimport {ResizableBox} from 'react-resizable'\nimport {useWindowSize} from \"../../../core/hooks\";\nimport 'react-resizable/css/styles.css';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: grey[300]\n        },\n        secondary: {\n            main: blue[500]\n        }\n    }\n});\n\nfunction App() {\n    const [text, setText] = useState(\"\");\n    const [wasm, setWASM] = useState();\n    const [dataSets, setDataSets] = useState([]);\n    const [, height] = useWindowSize();\n    const [initialEditorHeight, setInitialEditorHeight] = useState(0)\n    const [editorHeight, setEditorHeight] = useState(0)\n    const handleEditorChange = (ev: any, value: string | undefined) => {\n        if (value) {\n            setText(value)\n        }\n    };\n    const onGenerateChartButtonPress = useCallback(async () => {\n        if (text && wasm) {\n            const events = wasm.Events.from_text(text)\n            let events_data = events.get_events_data_by_idx(0)\n            if (events_data) {\n                let dataSet_vec = await events_data.dataset_vec()\n                if (dataSet_vec) {\n                    setDataSets(dataSet_vec.map((dataset: any) => {\n                        return {\n                            label: `${dataset.selection} ${dataset.group}`,\n                            data: dataset.points.map((point: any) => [point.timestamp - dataset.points[0].timestamp, point.value])\n                        }\n                    }))\n                }\n            }\n        }\n    }, [text, wasm]);\n    useEffect(\n        () => {\n            if (initialEditorHeight === 0) {\n                setInitialEditorHeight((height /2))\n                setEditorHeight((height/2) - 64)\n            }\n        },\n        [height, initialEditorHeight]\n    );\n    useEffect(() => {\n        (async () => {\n            setWASM(await import(\"event_processing/event_processing\"))\n        })()\n    }, []);\n\n    const onResize = (event: any, {element, size, handle}: any) => {\n        setEditorHeight(size.height);\n    };\n\n    const series = React.useMemo(\n        () => ({\n            showPoints: false\n        }),\n        []\n    );\n\n    const axes = React.useMemo(\n        () => [\n            {primary: true, type: 'linear', position: 'bottom'},\n            {type: 'linear', position: 'left'}\n        ],\n        []\n    );\n\n    const data = React.useMemo(() => {\n        return dataSets\n    }, [dataSets]);\n    return (\n        <div className=\"App\">\n            <ThemeProvider theme={theme}>\n                <HeaderAppBar title=\"Jordao's Challenge\"/>\n                <div style={{height: height - 128}}>\n                    <ResizableBox\n                        height={initialEditorHeight - 64}\n                        width={Infinity}\n                        axis=\"y\"\n                        minConstraints={[0, (height - 128)*0.25]}\n                        maxConstraints={[Infinity, (height - 128)*0.75]}\n                        onResize={onResize}\n                        resizeHandles={['s']}\n                        handle={(resizeHandle: string) => {\n                            return <div className={`draggable-icon`}>\n                                <DragHandleRounded  color={\"primary\"}/>\n                            </div>\n                        }}\n                    >\n                        <DataEditor height={editorHeight} handleEditorChange={handleEditorChange}/>\n                    </ResizableBox>\n                    <div style={{height: height - editorHeight - 128}}>\n                        <div style={{\n                            height: \"100%\",\n                            width: \"100%\",\n                            alignItems: 'center',\n                            flex: 1,\n                            display: \"flex\",\n                            // justifyContent: 'center'\n                        }}>\n                            <div style={{\n                                height: \"75%\",\n                                width: \"75%\",\n                                marginLeft: 15\n                            }}>\n                                <Chart data={data} series={series} axes={axes} tooltip/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <BottomAppBar onGenerateChartButtonPress={onGenerateChartButtonPress}/>\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/screens/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {monaco} from \"@monaco-editor/react\";\nmonaco\n    .init()\n    .then(monaco => {\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n            noSemanticValidation: true,\n            noSyntaxValidation: true,\n        });\n    })\n    .catch(error =>\n        console.error(\"An error occurred during initialization of Monaco: \", error)\n    );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}