{"version":3,"sources":["ui/components/stateless/bottom_app_bar/BottomAppBar.tsx","ui/components/stateless/header_app_bar/HeaderAppBar.tsx","ui/components/stateful/data_editor/DataEditor.tsx","core/util.ts","core/event_processing.ts","core/event_processing_without_wasm.ts","ui/components/stateful/chart_section/ChartSection.tsx","core/worker_setup.ts","core/event_processing_worker.ts","ui/screens/app/App.tsx","core/hooks.ts","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","top","bottom","flexGrow","grow","button","margin","spacing","input","display","BottomAppBar","onGenerateChartButtonPress","shouldInterpolate","onCheckBoxPressed","defaultInterpolateInterval","onInterpolateIntervalChange","classes","AppBar","position","color","className","Toolbar","Typography","align","Button","variant","onClick","Checkbox","checked","onChange","value","TextField","defaultValue","label","type","InputLabelProps","shrink","inputProps","style","textAlign","root","icon","marginLeft","marginRight","title","HeaderAppBar","DataEditor","height","handleEditorChange","language","_randomU16Value","Math","round","random","randomColor","green","red","blue","capitalize","s","charAt","toUpperCase","slice","measureTime","fun","name","t0","performance","now","result","t1","console","log","Point","timestamp","this","event","selection","group","point","isInGroup","forEach","g","data","key","DataSet","points","EventsData","start","stop","span","data_events","group_map","eventData","push","groupIdx","groupKey","_insertInGroupMap","EventsMapped","startEvent","stopEvent","spanEvent","dataEvents","select","groupMap","length","dataSets","groups","first","rest","init","map","n","reduce","vec","list","b","flatMap","xs","y","cartesianProduct","Object","keys","groupValue","dataSetsGroup","_getPointsFromDataSets","vecPoint","vIdx","datasets","_","i","hasSpan","hasStop","stopTimestamp","spanEndTimestamp","end","spanBeginTimestamp","begin","eKey","dataSet","dIdx","fromEvent","processTextToWasm","text","lines","split","linesCount","eventsMappedVec","eventsMapped","hasStarted","line","lineIdx","processLineEvent","addDataEvent","processText","JSON","parse","replace","$1","e","TabPanel","props","children","index","other","component","role","hidden","id","aria-labelledby","Box","p","ChartSection","useState","setValue","useEffect","options","React","useMemo","maintainAspectRatio","responsive","scales","xAxes","labelString","ticks","fontSize","fontColor","yAxes","beginAtZero","legend","fullWidth","Tabs","newValue","aria-label","Tab","width","alignItems","flex","WebWorker","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","processWorker","generateLabelFromDataSetInfo","groupInfo","keyName","String","Number","Bool","Null","join","acc","processEventsData","eventDatasets","dataset","colorA1","colorA0_4","fill","pointHoverBorderColor","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","x","Date","self","addEventListener","postMessage","createMuiTheme","palette","primary","main","grey","secondary","HandleElement","App","setText","webWorker","setWW","wasm","setWASM","setData","editorHeight","setEditorHeight","interpolateInterval","setInterpolateInterval","size","setSize","useLayoutEffect","debouncedFunction","debounce","oldSize","window","innerWidth","innerHeight","removeEventListener","useWindowSize","initialEditorHeight","setInitialEditorHeight","setShouldInterpolate","useCallback","a","eventMapped","getDatasets","val","process_js_value","BigInt","withWasmResult","myWorker","leading","graphHeight","ThemeProvider","enable","right","left","topRight","bottomRight","bottomLeft","topLeft","defaultSize","Infinity","minWidth","maxWidth","minHeight","maxHeight","onResize","direction","ref","delta","newHeight","parseInt","handleComponent","ev","target","Boolean","location","hostname","match","monaco","then","languages","typescript","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","catch","error","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f3eaef7.chunk.js","sourcesContent":["import * as React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport Typography from \"@material-ui/core/Typography\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  input: {\n    display: 'none',\n  },\n}))\n\nexport interface BottomAppBarProps {\n  onGenerateChartButtonPress?: React.MouseEventHandler,\n  shouldInterpolate?: boolean,\n  onCheckBoxPressed?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void,\n  defaultInterpolateInterval?: number,\n  onInterpolateIntervalChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n}\n\nexport default function BottomAppBar({\n  onGenerateChartButtonPress,\n  shouldInterpolate = true, onCheckBoxPressed, defaultInterpolateInterval = 100, onInterpolateIntervalChange\n}: BottomAppBarProps) {\n  const classes = useStyles()\n\n  return (\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <Typography align=\"left\" className={classes.grow} >\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                onClick={onGenerateChartButtonPress}\n            >\n              Generate Chart\n            </Button>\n          </Typography>\n          <Typography align=\"right\"  >\n            should Interpolate?\n            <Checkbox\n                checked={shouldInterpolate}\n                onChange={onCheckBoxPressed}\n                value=\"shouldInterpolate\"\n            />\n          </Typography>\n          <TextField\n              defaultValue={defaultInterpolateInterval}\n              label=\"Interval value:\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={onInterpolateIntervalChange}\n              inputProps={{\n                style: { textAlign: \"center\" }\n              }}\n          />\n\n        </Toolbar>\n      </AppBar>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport MultilineChart from '@material-ui/icons/MultilineChartRounded'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  icon: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}))\n\ninterface HeaderAppBarProps {\n  title: String\n}\n\nexport default function HeaderAppBar({ title }: HeaderAppBarProps) {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <MultilineChart className={classes.icon} />\n          <Typography align=\"left\" variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react'\nimport {\n  ControlledEditor,\n  ControlledEditorOnChange,\n} from '@monaco-editor/react'\nimport './DataEditor.css'\n\ninterface DataEditorProps {\n  height?: string | number | undefined\n  handleEditorChange?: ControlledEditorOnChange | undefined\n}\n\nconst DataEditor = ({\n  height = '50vh',\n  handleEditorChange,\n}: DataEditorProps) => {\n  return (\n    <ControlledEditor\n      theme=\"dark\"\n      height={height}\n      onChange={handleEditorChange}\n      language=\"typescript\"\n    />\n  )\n}\n\nexport default DataEditor\n","export interface ColorProps {\n  green: number\n  red: number\n  blue: number\n}\n\nfunction _randomU16Value(): number {\n  return Math.round(Math.random() * 255)\n}\n\nexport function randomColor(): ColorProps {\n  return {\n    green: _randomU16Value(),\n    red: _randomU16Value(),\n    blue: _randomU16Value(),\n  }\n}\nexport function capitalize(s: string): string {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport function getValueFromGroup(groupValue: any): string {\n  if (groupValue.String) {\n    return groupValue.String\n  } else if (groupValue.Number) {\n    return groupValue.Number\n  } else if (groupValue.Bool) {\n    return groupValue.Bool\n  } else if (groupValue.Null) {\n    return \"Null\"\n  } else {\n    return \"\"\n  }\n}\n\nexport function generateLabelFromDataSetInfo(\n  group: any[],\n  selection: string\n): string {\n  let groupInfo = group.map(([keyName, value]) => {\n    return `${capitalize(keyName)}: ${capitalize(getValueFromGroup(value))}`\n  }).join(\", \")\n  return `${groupInfo ? groupInfo + ', ': ''}${selection\n    .split('_')\n    .reduce(\n      (acc: string, value: string) =>\n        acc ? `${acc} ${capitalize(value)}` : capitalize(value),\n      ''\n    )}`\n}\n","import { generateLabelFromDataSetInfo, randomColor } from './util'\n// @ts-ignore\nimport * as chartjs from 'chart.js'\nimport { ChartData } from 'react-chartjs-2'\n\nexport interface Point {\n  timestamp: number\n  value: number\n}\n\nexport interface DataSet {\n  group: string[]\n  selection: string\n  points: Point[]\n}\n\nexport function measureTime(fun: any, name: string = \"fun\") {\n  const t0 = performance.now();\n  const result = fun();\n  const t1 = performance.now();\n  console.log(`Call to ${name} took ` + (t1 - t0) + ` milliseconds.`);\n  return [result, t0, t1, t1 - t0]\n}\nexport function processEvents(\n  datasets: DataSet[][] | undefined\n): ChartData<chartjs.ChartData>[] {\n  if (datasets) {\n    return datasets.map((dataSets) => {\n      const processedDataSets = dataSets.map(dataset => {\n        let color = randomColor()\n        let colorA1 = `rgba(${color.red}, ${color.green}, ${color.blue}, 1)`\n        let colorA0_4 = `rgba(${color.red}, ${color.green}, ${color.blue}, 0.4)`\n        return {\n          label: generateLabelFromDataSetInfo(\n              dataset.group,\n              dataset.selection\n          ),\n          fill: false,\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          backgroundColor: colorA0_4,\n          borderColor: colorA1,\n          pointBorderColor: colorA1,\n          pointHoverBackgroundColor: colorA1,\n          data: dataset.points.map(point => ({\n            x: point.timestamp - dataset.points[0].timestamp,\n            y: point.value,\n          })),\n        }\n      })\n      return ({ datasets: processedDataSets })\n    })\n  }\n  return []\n}\n","import { randomColor, capitalize } from \"./util\";\nimport { ChartData } from \"react-chartjs-2\";\n// @ts-ignore\nimport * as chartjs from 'chart.js'\n\nexport interface EventBase {\n  type: string,\n  timestamp: number\n}\n\nexport interface StartEvent extends EventBase {\n  select?: string[],\n  group?: string[]\n}\n\nexport interface StopEvent extends EventBase {\n\n}\n\nexport interface SpanEvent extends EventBase {\n  end: number,\n  begin: number\n}\n\nexport interface DataEvent extends EventBase, Object {\n  data?: any\n}\n\nexport class Point {\n  value: number;\n  timestamp: number;\n\n  constructor(value: number, timestamp: number) {\n    this.value = value\n    this.timestamp = timestamp\n  }\n\n  static fromEvent(event: DataEvent, selection: string, group: Groupable[]): Point | undefined {\n    if (event && event.type === 'data') {\n      const point = new Point(0, event.timestamp)\n      let isInGroup = true;\n      group.forEach((g) => {\n        let data = (event as any)[g.key]\n        isInGroup = isInGroup && data === g.value\n      })\n      if (isInGroup) {\n        point.value = (event as any)[selection]\n        return point\n      }\n    }\n    return;\n  }\n}\n\nexport interface Groupable {\n  key: string,\n  value: any\n}\n\nexport class DataSet {\n  points: Point[];\n  selection: string;\n  group: Groupable[];\n  constructor(selection: string, group?: Groupable[], points?: Point[]) {\n    this.selection = selection\n    this.points = points || []\n    this.group = group || []\n  }\n}\n\nexport class EventsData {\n  start?: StartEvent;\n  stop?: StopEvent;\n  span?: SpanEvent;\n  data_events: DataEvent[];\n  group_map: any;\n\n  constructor() {\n    this.data_events = []\n    this.group_map = {}\n  }\n\n  addDataEvent(eventData: any) {\n    const { type, timestamp, ...data } = eventData\n    this.data_events.push({ type, timestamp, data })\n    if (this.start && this.start.group) {\n      for (let groupIdx in this.start.group) {\n        let groupKey = this.start.group[groupIdx]\n        let value = eventData[groupKey]\n        if (value) {\n          this._insertInGroupMap(groupKey, value)\n        }\n      }\n    }\n  }\n\n  _insertInGroupMap(key: string, value: any) {\n    if (this.group_map[key]) {\n      this.group_map[key][value] = true\n    } else {\n      this.group_map[key] = {\n        [value]: true\n      }\n    }\n  }\n}\nexport class EventsMapped {\n  startEvent?: StartEvent;\n  stopEvent?: StopEvent;\n  spanEvent?: SpanEvent;\n  dataEvents: EventBase[];\n  select?: string[];\n  groupMap: any;\n\n  constructor() {\n    this.dataEvents = []\n    this.groupMap = {}\n  }\n\n  addDataEvent(eventData: any) {\n    this.dataEvents.push(eventData)\n    if (this.startEvent && this.startEvent.group) {\n      for (let groupIdx in this.startEvent.group) {\n        let groupKey = this.startEvent.group[groupIdx]\n        let value = eventData[groupKey]\n        if (value) {\n          this._insertInGroupMap(groupKey, value)\n        }\n      }\n    }\n  }\n\n  _insertInGroupMap(key: string, value: any) {\n    if (this.groupMap[key]) {\n      this.groupMap[key][value] = true\n    } else {\n      this.groupMap[key] = {\n        [value]: true\n      }\n    }\n  }\n\n  getDatasets(): DataSet[] {\n    if (this.select && this.select.length > 0) {\n      if (this.startEvent) {\n        let dataSets: DataSet[] = []\n        if (this.startEvent.group && this.startEvent.group.length > 0) {\n          let groupValues = Object.keys(this.groupMap).map((key) => {\n            return Object.keys(this.groupMap[key]).map((groupValue) => ({\n              key,\n              value: groupValue\n            }))\n          })\n          let groups : Groupable[][] = cartesianProduct(groupValues)\n          this.select.forEach(\n            (s) => {\n              let dataSetsGroup = groups.map((group) => {\n                return new DataSet(s, group)\n              })\n              dataSets.push(...dataSetsGroup)\n            }\n          )\n        } else {\n          this.select.forEach(\n            (s) => {\n              dataSets.push(new DataSet(s))\n            }\n          )\n        }\n        let vecPoints = this._getPointsFromDataSets(dataSets)\n        vecPoints.forEach((vecPoint, vIdx) => {\n          dataSets[vIdx].points = vecPoint\n        })\n        return dataSets\n      }\n    }\n    return []\n  }\n\n  _getPointsFromDataSets(datasets: DataSet[]): Point[][] {\n    let points: Point[][] = []\n    datasets.forEach((_, i) => points[i] = [])\n    const hasSpan = !!this.spanEvent\n    const hasStop = !!this.stopEvent\n    const stopTimestamp = this.stopEvent ? this.stopEvent.timestamp : 0 \n    const spanEndTimestamp = this.spanEvent ? this.spanEvent.end : 0\n    const spanBeginTimestamp = this.spanEvent ? this.spanEvent.begin : 0\n    for (let eKey in this.dataEvents) {\n      let event = this.dataEvents[eKey]\n      datasets.forEach((dataSet, dIdx) => {\n        let point = Point.fromEvent(event, dataSet.selection, dataSet.group)\n        if (point && ((hasStop && stopTimestamp >= point.timestamp) || !hasStop) && ((hasSpan && point.timestamp >= spanBeginTimestamp && point.timestamp && spanEndTimestamp) || !hasSpan) ) {\n          points[dIdx].push(point)\n        }\n      })\n    }\n    return points\n  }\n}\n\n\nexport function processTextToWasm(text: string): any[] {\n  const lines = text.split(/\\r\\n|\\n/)\n  const linesCount = lines.length\n  const eventsMappedVec: EventsData[] = []\n  let eventsMapped = new EventsData()\n  let hasStarted = false\n  lines.forEach((line, lineIdx) => {\n    const eventData = processLineEvent(line)\n    if(eventData) {\n      switch (eventData.type) {\n        case 'start':\n          if (hasStarted) {\n            eventsMappedVec.push(eventsMapped)\n            eventsMapped = new EventsData()\n            eventsMapped.start = eventData\n          } else {\n            eventsMapped.start = eventData\n            hasStarted = true\n          }\n          break;\n        case 'span':\n          eventsMapped.span = eventData\n          break;\n        case 'data':\n          if (hasStarted) {\n            eventsMapped.addDataEvent(eventData)\n          }\n          break;\n        case 'stop':\n          eventsMapped.stop = eventData\n          eventsMappedVec.push(eventsMapped)\n          eventsMapped = new EventsData()\n          hasStarted = false;\n          break;\n        default:\n          break;\n      }\n    }\n    if (lineIdx === linesCount) {\n      if (eventsMapped.start) {\n        eventsMappedVec.push(eventsMapped)\n      }\n      eventsMapped =  new EventsData()\n    }\n  })\n  return eventsMappedVec\n}\n\nexport function processText(text: string): EventsMapped[] {\n  const lines = text.split(/\\r\\n|\\n/)\n  const linesCount = lines.length\n  const eventsMappedVec: EventsMapped[] = []\n  let eventsMapped = new EventsMapped()\n  let hasStarted = false\n  lines.forEach((line, lineIdx) => {\n    const eventData = processLineEvent(line)\n    if(eventData) {\n      switch (eventData.type) {\n        case 'start':\n          if (hasStarted) {\n            eventsMappedVec.push(eventsMapped)\n            eventsMapped = new EventsMapped()\n            eventsMapped.select = eventData.select\n            eventsMapped.startEvent = eventData\n          } else {\n            eventsMapped.select = eventData.select\n            eventsMapped.startEvent = eventData\n            hasStarted = true\n          }\n          break;\n        case 'span':\n          eventsMapped.spanEvent = eventData\n          break;\n        case 'data':\n          if (hasStarted) {\n            eventsMapped.addDataEvent(eventData)\n          }\n          break;\n        case 'stop':\n          eventsMapped.stopEvent = eventData\n          eventsMappedVec.push(eventsMapped)\n          eventsMapped = new EventsMapped()\n          hasStarted = false;\n          break;\n        default:\n          break;\n      }\n    }\n    if (lineIdx === linesCount) {\n      if (eventsMapped.startEvent) {\n        eventsMappedVec.push(eventsMapped)\n      }\n      eventsMapped = new EventsMapped()\n    }\n  })\n  return eventsMappedVec\n}\n\nexport function processEventsMapped(eventsMapped: EventsMapped[]): ChartData<chartjs.ChartData>[] {\n  return eventsMapped.map((eventMapped) => {\n    const dataSets = eventMapped.getDatasets()\n    return {\n      datasets: dataSets.map(dataset => {\n        let color = randomColor()\n        let colorA1 = `rgba(${color.red}, ${color.green}, ${color.blue}, 1)`\n        let colorA0_4 = `rgba(${color.red}, ${color.green}, ${color.blue}, 0.4)`\n        return {\n          label: `${dataset.group.reduce((acc, val) => `${acc} ${capitalize(val.key)}:${capitalize(val.value)}`, ``)}${capitalize(dataset.selection)}`,\n          fill: false,\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          backgroundColor: colorA0_4,\n          borderColor: colorA1,\n          pointBorderColor: colorA1,\n          pointHoverBackgroundColor: colorA1,\n          data: dataset.points.map(point => ({\n            x: point.timestamp - dataset.points[0].timestamp,\n            y: point.value,\n          })),\n        }\n      })\n    }\n  })\n\n}\n\nexport function processLineEvent(line: string): any {\n  try {\n    return JSON.parse(convertToStrictJSON(line))\n  } catch (e) {\n    return null\n  }\n}\n\nexport function cartesianProduct(input: any[][] ): any[][] {\n  const [first, ...rest] = input\n  let init = first.map((n) => {\n    return [n]\n  })\n  return rest.reduce((vec, list) => partialCartesian(vec, list), init)\n}\n\nfunction partialCartesian(a: any[][], b: any[]): any[][] {\n  return a.flatMap((xs) => {\n    return b.map((y) => {\n      let vec = [...xs]\n      vec.push(y)\n      return vec\n    })\n  })\n}\n\n\nexport function convertToStrictJSON(jsonString: string): string {\n  return jsonString\n    // wrap keys without quote with valid double quote\n    .replace(/([\\w]+)\\s*:/g, function(_, $1){return '\"'+$1+'\":'})\n    // replacing single quote wrapped ones to double quote \n    .replace(/'([^']+)'/g, function(_, $1){return '\"'+$1+'\"'})\n}\n\n","import { ChartData, Line } from 'react-chartjs-2'\n// @ts-ignore\nimport * as chartjs from 'chart.js'\nimport React, { CSSProperties, useEffect, useState } from 'react'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\ninterface ChartSectionProps {\n  data: ChartData<chartjs.ChartData>[]\n  style: CSSProperties\n}\n\nfunction TabPanel(props: any) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`wrapped-tabpanel-${index}`}\n      aria-labelledby={`wrapped-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  )\n}\n\nconst ChartSection = (props: ChartSectionProps) => {\n  const [value, setValue] = useState(0)\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue)\n  }\n  useEffect(() => {\n    setValue(0)\n  }, [props.data])\n  const options = React.useMemo(\n    () => ({\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [\n          {\n            type: 'time',\n            display: true,\n            labelString: 'Milliseconds',\n            ticks: {\n              fontSize: '10',\n              fontColor: '#969da5',\n            },\n          },\n        ],\n        yAxes: [\n          {\n            display: true,\n            type: 'linear',\n            labelString: 'Response Time',\n            ticks: {\n              beginAtZero: true,\n            },\n          },\n        ],\n      },\n    }),\n    []\n  )\n  const legend = React.useMemo(\n    () => ({\n      display: true,\n      position: 'right',\n      fullWidth: true,\n    }),\n    []\n  )\n  return (\n    <div>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        aria-label=\"wrapped label tabs example\"\n      >\n        {props.data.map((data, index) => {\n          return <Tab value={index} label={`Chart ${index}`} key={index} />\n        })}\n      </Tabs>\n      {props.data.map((data, index) => {\n        return (\n          <TabPanel value={value} index={index} key={index}>\n            <div\n              style={{\n                height: '100%',\n                width: '100%',\n                alignItems: 'center',\n                flex: 1,\n                display: 'flex',\n                // justifyContent: 'center'\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  ...props.style,\n                }}\n              >\n                <Line data={data} options={options} legend={legend} />\n              </div>\n            </div>\n          </TabPanel>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ChartSection\n","export default class WebWorker {\n    constructor(worker: any) {\n        const code = worker.toString();\n        const blob = new Blob([\"(\" + code + \")()\"]);\n        return new Worker(URL.createObjectURL(blob));\n    }\n}","function processWorker() {\n    // eslint-disable-next-line\n    function _randomU16Value(): number {\n        return Math.round(Math.random() * 255)\n    }\n\n    function randomColor(): any {\n        return {\n            green: _randomU16Value(),\n            red: _randomU16Value(),\n            blue: _randomU16Value(),\n        }\n    }\n\n    function generateLabelFromDataSetInfo(\n        group: any[],\n        selection: string\n    ): string {\n        let groupInfo = group.map(([keyName, value]) => {\n            return `${capitalize(keyName)}: ${capitalize(getValueFromGroup(value))}`\n        }).join(\", \")\n        return `${groupInfo ? groupInfo + ', ': ''}${selection\n            .split('_')\n            .reduce(\n                (acc: string, value: string) =>\n                    acc ? `${acc} ${capitalize(value)}` : capitalize(value),\n                ''\n            )}`\n    }\n\n    function capitalize(s: string): string {\n        return s.charAt(0).toUpperCase() + s.slice(1)\n    }\n\n    function getValueFromGroup(groupValue: any): string {\n        if (groupValue.String) {\n            return groupValue.String\n        } else if (groupValue.Number) {\n            return groupValue.Number\n        } else if (groupValue.Bool) {\n            return groupValue.Bool\n        } else if (groupValue.Null) {\n            return \"Null\"\n        } else {\n            return \"\"\n        }\n    }\n\n    const processEventsData = (eventDatasets: any) => {\n        if (eventDatasets) {\n            return eventDatasets.map((dataSets: any) => {\n                const processedDataSets = dataSets.map((dataset: any)=> {\n                    let color = randomColor()\n                    let colorA1 = `rgba(${color.red}, ${color.green}, ${color.blue}, 1)`\n                    let colorA0_4 = `rgba(${color.red}, ${color.green}, ${color.blue}, 0.4)`\n                    return {\n                        label: generateLabelFromDataSetInfo(\n                            dataset.group,\n                            dataset.selection\n                        ),\n                        fill: false,\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        backgroundColor: colorA0_4,\n                        borderColor: colorA1,\n                        pointBorderColor: colorA1,\n                        pointHoverBackgroundColor: colorA1,\n                        data: dataset.points.map((point: any) => ({\n                            x: new Date(point.timestamp),\n                            y: point.value,\n                        })),\n                    }\n                })\n                return ({ datasets: processedDataSets })\n            })\n        }\n        return []\n    }\n\n    // eslint-disable-next-line\n    self.addEventListener(\"message\", event => {\n        if (!event) return;\n        const eventDatasets = event.data\n        const result = processEventsData(eventDatasets)\n        // @ts-ignore\n        postMessage(result);\n    })\n}\n\nexport default processWorker","import React, {useCallback, useEffect, useState} from 'react'\nimport { ThemeProvider } from '@material-ui/styles'\nimport { createMuiTheme } from '@material-ui/core'\nimport { grey, blue } from '@material-ui/core/colors'\nimport DragHandleRounded from '@material-ui/icons/DragHandleRounded'\nimport BottomAppBar from '../../components/stateless/bottom_app_bar/BottomAppBar'\nimport HeaderAppBar from '../../components/stateless/header_app_bar/HeaderAppBar'\nimport DataEditor from '../../components/stateful/data_editor/DataEditor'\nimport { Resizable } from \"re-resizable\";\nimport { useWindowSize } from '../../../core/hooks'\nimport './App.css'\nimport { processEvents, measureTime } from '../../../core/event_processing'\nimport {processText, processEventsMapped, processTextToWasm} from '../../../core/event_processing_without_wasm'\nimport ChartSection from '../../components/stateful/chart_section/ChartSection'\nimport WebWorker from \"../../../core/worker_setup\";\nimport myWorker from \"../../../core/event_processing_worker\"\nimport debounce from 'lodash/debounce'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: grey[300],\n    },\n    secondary: {\n      main: blue[500],\n    },\n  },\n})\n\nfunction HandleElement(props: any) {\n  return (<div className={`draggable-icon`}>\n    <DragHandleRounded color={'primary'} />\n  </div>)\n}\n\nfunction App() {\n  const [text, setText] = useState('')\n  const [webWorker, setWW] = useState()\n  const [wasm, setWASM] = useState()\n  const [data, setData] = useState([{ datasets: [] }])\n  const [editorHeight, setEditorHeight] = useState(0)\n  const [interpolateInterval, setInterpolateInterval] = useState(100)\n  const [width, height] = useWindowSize()\n  const [initialEditorHeight, setInitialEditorHeight] = useState(0)\n  const [shouldInterpolate, setShouldInterpolate] = useState(true)\n\n  const handleEditorChange = (ev: any, value: string | undefined) => {\n    if (value) {\n      setText(value)\n    }\n  }\n\n  const onGenerateChartButtonPress = useCallback(async () => {\n    if (text && wasm) {\n      const [withoutWasmResult,,, withoutElapsedTime] = measureTime(() => processEventsMapped(processText(text)), 'without wasm')\n      const [withWasmResult,,, withElapsedTime] = measureTime(() => {\n        return wasm.EventsData.process_js_value(processTextToWasm(text), shouldInterpolate, BigInt(interpolateInterval))\n      }, 'with wasm')\n      webWorker.postMessage(withWasmResult)\n      webWorker.addEventListener(\"message\", (event:any) => {\n        setData(event.data)\n      })\n      // setData(withWasmResult)\n      // setData(withoutWasmResult)\n      // setData(withoutElapsedTime < withElapsedTime ? withoutWasmResult : withWasmResult)\n    }\n  }, [shouldInterpolate, interpolateInterval, webWorker, text, wasm])\n  useEffect(() => {\n    if (initialEditorHeight === 0) {\n      setInitialEditorHeight(height / 2)\n      setEditorHeight(height / 2 - 64)\n    }\n  }, [height, initialEditorHeight])\n  useEffect(() => {\n    ;(async () => {\n      setWASM(await import('event_processing/event_processing'))\n    })()\n  }, [])\n  useEffect(() => {\n    setWW(new WebWorker(myWorker))\n  }, [])\n  const onInterpolateIntervalChange = useCallback(debounce((value: any) => {\n    setInterpolateInterval(value && value > 2 ? value: 2)\n  }, 500, { leading: false }), [])\n  const onResize = (event: any, direction: any, ref: any, delta: any) => {\n    const newHeight = parseInt(ref.style.height.replace(\"px\", \"\"))\n    if (newHeight) {\n      setEditorHeight(newHeight)\n    }\n  };\n\n  const graphHeight = height - editorHeight - 128\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <HeaderAppBar title=\"Jordao's Challenge\" />\n        <div style={{ height: height - 128 }}>\n          <Resizable\n              enable={{ top:false, right:false, bottom:true, left:false, topRight:false, bottomRight:false, bottomLeft:false, topLeft:false }}\n              defaultSize={{\n                height: initialEditorHeight - 64,\n                width: Infinity\n              }}\n              minWidth={0}\n              maxWidth={width}\n              minHeight={(height - 128) * 0.25}\n              maxHeight={(height - 128) * 0.75}\n              onResize={onResize}\n              handleComponent={{\n                bottom: <HandleElement/>\n              }}\n          >\n            <DataEditor\n                height={editorHeight}\n                handleEditorChange={handleEditorChange}\n            />\n          </Resizable>\n          <div style={{ height: graphHeight, width }}>\n            <ChartSection\n              data={data}\n              style={{\n                height: `${graphHeight * 0.9 - 64}px`,\n                width: `${width}px`,\n              }}\n            />\n          </div>\n        </div>\n        <BottomAppBar\n            onGenerateChartButtonPress={onGenerateChartButtonPress}\n            shouldInterpolate={shouldInterpolate}\n            onCheckBoxPressed={(event, value) => {\n              setShouldInterpolate(value)\n            }}\n            defaultInterpolateInterval={interpolateInterval}\n            onInterpolateIntervalChange={(event) => onInterpolateIntervalChange(parseInt(event.target.value))}\n        />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","import { useLayoutEffect, useState } from 'react'\nimport debounce from 'lodash/debounce'\n\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0])\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize(oldSize => {\n        return [window.innerWidth, window.innerHeight]\n      })\n    }\n    const debouncedFunction = debounce(updateSize, 150)\n    window.addEventListener('resize', debouncedFunction)\n    debouncedFunction()\n    return () => window.removeEventListener('resize', debouncedFunction)\n  }, [])\n  return size\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/screens/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { monaco } from '@monaco-editor/react';\nmonaco\n  .init()\n  .then(monaco => {\n    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n      noSemanticValidation: true,\n      noSyntaxValidation: true,\n    });\n  })\n  .catch(error =>\n    console.error('An error occurred during initialization of Monaco: ', error)\n  );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}